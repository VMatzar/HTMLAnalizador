
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\004\002\000\002\004\007\000\002\005\002" +
    "\000\002\005\010\000\002\006\002\000\002\006\007\000" +
    "\002\007\005\000\002\007\006\000\002\010\007\000\002" +
    "\010\005\000\002\010\010\000\002\010\006\000\002\010" +
    "\005\000\002\010\006\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\013\003\000" +
    "\002\013\003\000\002\022\002\000\002\022\004\000\002" +
    "\022\004\000\002\027\007\000\002\011\003\000\002\011" +
    "\003\000\002\014\005\000\002\014\007\000\002\023\002" +
    "\000\002\023\005\000\002\024\002\000\002\024\005\000" +
    "\002\025\002\000\002\025\003\000\002\026\002\000\002" +
    "\026\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\016\002\000\002\016\006" +
    "\000\002\017\002\000\002\017\006\000\002\020\002\000" +
    "\002\020\006\000\002\021\002\000\002\021\012\000\002" +
    "\021\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\004\004\006\001\002\000\004\002\146\001" +
    "\002\000\004\002\000\001\002\000\010\005\ufffe\006\010" +
    "\012\ufffe\001\002\000\006\005\ufffc\012\015\001\002\000" +
    "\004\022\011\001\002\000\004\026\012\001\002\000\004" +
    "\043\013\001\002\000\004\007\014\001\002\000\006\005" +
    "\ufffd\012\ufffd\001\002\000\014\010\021\013\ufffa\016\ufffa" +
    "\020\ufffa\025\ufffa\001\002\000\004\005\017\001\002\000" +
    "\004\002\uffff\001\002\000\012\013\uffd4\016\133\020\uffd4" +
    "\025\uffd4\001\002\000\006\014\uffd6\046\022\001\002\000" +
    "\006\026\127\052\126\001\002\000\004\014\025\001\002" +
    "\000\004\011\123\001\002\000\004\023\027\001\002\000" +
    "\004\015\121\001\002\000\004\026\030\001\002\000\014" +
    "\015\uffd0\020\034\023\uffd0\041\032\043\031\001\002\000" +
    "\006\015\ufff5\023\027\001\002\000\012\024\061\033\uffe0" +
    "\042\056\045\062\001\002\000\006\015\ufff2\023\027\001" +
    "\002\000\006\046\036\054\035\001\002\000\004\021\051" +
    "\001\002\000\004\026\037\001\002\000\004\043\040\001" +
    "\002\000\010\021\uffd2\025\042\046\uffd2\001\002\000\006" +
    "\021\uffd6\046\022\001\002\000\004\026\043\001\002\000" +
    "\004\044\044\001\002\000\014\013\uffd2\020\uffd2\021\uffd2" +
    "\025\042\046\uffd2\001\002\000\012\013\uffd1\020\uffd1\021" +
    "\uffd1\046\uffd1\001\002\000\004\021\047\001\002\000\012" +
    "\013\uffd0\015\uffd0\020\034\023\uffd0\001\002\000\010\013" +
    "\uffcf\015\uffcf\023\uffcf\001\002\000\012\013\uffd0\015\uffd0" +
    "\020\034\023\uffd0\001\002\000\010\013\uffce\015\uffce\023" +
    "\uffce\001\002\000\004\015\ufff1\001\002\000\004\041\116" +
    "\001\002\000\010\033\100\042\uffde\045\uffde\001\002\000" +
    "\014\027\uffe5\030\uffe5\031\uffe5\032\uffe5\041\uffee\001\002" +
    "\000\004\041\uffef\001\002\000\012\027\067\030\065\031" +
    "\070\032\064\001\002\000\004\041\uffed\001\002\000\016" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\034\uffe6\041\uffe6\001" +
    "\002\000\004\041\ufff0\001\002\000\010\033\uffd7\042\uffd7" +
    "\045\uffd7\001\002\000\010\033\uffd9\042\uffd9\045\uffd9\001" +
    "\002\000\010\033\uffe0\042\072\045\062\001\002\000\010" +
    "\033\uffda\042\uffda\045\uffda\001\002\000\010\033\uffd8\042" +
    "\uffd8\045\uffd8\001\002\000\010\033\uffdf\042\uffdf\045\uffdf" +
    "\001\002\000\016\027\uffe5\030\uffe5\031\uffe5\032\uffe5\034" +
    "\uffe5\041\uffe5\001\002\000\014\027\067\030\065\031\070" +
    "\032\064\041\uffe4\001\002\000\010\033\uffe0\042\072\045" +
    "\062\001\002\000\014\027\067\030\065\031\070\032\064" +
    "\041\uffe3\001\002\000\010\033\uffe0\042\072\045\062\001" +
    "\002\000\012\027\067\030\065\031\070\032\064\001\002" +
    "\000\006\042\uffdd\045\uffdd\001\002\000\006\042\072\045" +
    "\062\001\002\000\012\027\067\030\065\031\070\032\064" +
    "\001\002\000\016\027\uffdc\030\uffdc\031\uffdc\032\uffdc\034" +
    "\105\041\uffdc\001\002\000\014\027\067\030\065\031\070" +
    "\032\064\041\uffe2\001\002\000\014\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\041\uffdb\001\002\000\006\042\072\045\062" +
    "\001\002\000\004\041\uffe7\001\002\000\014\027\067\030" +
    "\065\031\070\032\064\041\uffe2\001\002\000\004\041\uffe1" +
    "\001\002\000\006\042\072\045\062\001\002\000\016\027" +
    "\067\030\065\031\070\032\064\034\uffe4\041\uffe4\001\002" +
    "\000\006\042\072\045\062\001\002\000\016\027\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\034\uffe3\041\uffe3\001\002\000\006" +
    "\015\ufff6\023\027\001\002\000\004\015\ufff4\001\002\000" +
    "\004\015\ufff3\001\002\000\006\011\ufff8\014\025\001\002" +
    "\000\004\011\ufff7\001\002\000\014\010\021\013\ufffa\016" +
    "\ufffa\020\ufffa\025\ufffa\001\002\000\012\013\ufff9\016\ufff9" +
    "\020\ufff9\025\ufff9\001\002\000\004\042\130\001\002\000" +
    "\004\042\uffeb\001\002\000\004\042\uffec\001\002\000\010" +
    "\014\uffd6\021\uffd6\046\022\001\002\000\006\014\uffd5\021" +
    "\uffd5\001\002\000\010\013\uffd2\020\uffd2\025\042\001\002" +
    "\000\010\017\uffea\043\134\054\135\001\002\000\010\017" +
    "\uffea\043\134\054\135\001\002\000\010\017\uffea\043\134" +
    "\054\135\001\002\000\004\017\137\001\002\000\012\013" +
    "\uffd4\016\133\020\uffd4\025\uffd4\001\002\000\010\013\uffd3" +
    "\020\uffd3\025\uffd3\001\002\000\004\017\uffe8\001\002\000" +
    "\004\017\uffe9\001\002\000\006\013\uffd0\020\034\001\002" +
    "\000\004\013\145\001\002\000\004\005\ufffb\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\006\001\001\000\004" +
    "\005\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\131\001\001\000\004\016\022\001\001\000\004" +
    "\013\124\001\001\000\004\007\023\001\001\000\002\001" +
    "\001\000\004\010\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\032\001\001\000\004\010\117\001" +
    "\001\000\014\011\057\012\053\014\062\024\054\027\056" +
    "\001\001\000\004\010\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\040\001\001\000\004\016\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\047\001\001\000" +
    "\002\001\001\000\004\021\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\072" +
    "\024\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\073\001\001" +
    "\000\006\011\074\024\070\001\001\000\004\015\075\001" +
    "\001\000\006\011\076\024\070\001\001\000\004\015\075" +
    "\001\001\000\002\001\001\000\006\011\101\014\102\001" +
    "\001\000\004\015\111\001\001\000\004\026\103\001\001" +
    "\000\006\015\105\023\106\001\001\000\002\001\001\000" +
    "\004\011\107\001\001\000\002\001\001\000\006\015\105" +
    "\023\110\001\001\000\002\001\001\000\004\011\112\001" +
    "\001\000\004\015\113\001\001\000\004\011\114\001\001" +
    "\000\002\001\001\000\004\010\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\121\001\001\000\002" +
    "\001\001\000\004\006\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\130\001\001\000\002\001\001\000\004\020\142\001" +
    "\001\000\004\022\135\001\001\000\004\022\141\001\001" +
    "\000\004\022\140\001\001\000\002\001\001\000\004\017" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public String error="";   
    public static LinkedList <TError> TablaES= new LinkedList <TError>();


/* El objeto Symbo tiene como parametro Value = Lexema,   right =fila y left=columna */
    public void syntax_error (Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;        
        error= "Error Sintactico: " + lexema +" en la linea "+ fila + " en la columna " + columna;
        System.out.println(error);
        System.out.println("============================================");
        TError datosSintactico = new TError(lexema, fila, columna, "Error Sintactico", "Caracter no esperado");
        TablaES.add(datosSintactico);
    }
    public void unrecovered_syntax_error (Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;        
        error= "Error Sintactico: " + lexema +" en la linea "+ fila + " en la columna " + columna;
        System.out.println(error);
        System.out.println("============================================");
        TError datosSintactico = new TError(lexema, fila, columna, "Error Sintactico", "Caracter no esperado");
        TablaES.add(datosSintactico);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {



  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= EstadoInicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // EstadoInicial ::= E 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 resultado=a; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EstadoInicial",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E ::= HTML_Apertura Encabezado Cuerpo HTML_Cierre 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Encabezado ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Encabezado",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Encabezado ::= Encabezado_Apertura Titulo Igual Informacion_O_Identificador Encabezado_Cierre 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Encabezado",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Cuerpo ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Cuerpo",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Cuerpo ::= Cuerpo_Apertura Tablas Listas Enlaces Imagenes Cuerpo_Cierre 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Cuerpo",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Tablas ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Tablas",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Tablas ::= Tabla_Apertura Atributos Filas Tabla_Cierre Tablas 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Tablas",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Filas ::= Fila_Apertura Columnas Fila_Cierre 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Filas",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Filas ::= Fila_Apertura Columnas Fila_Cierre Filas 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Filas",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Columnas ::= Columna Igual Comillas DatosDeColumna Comillas 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Columnas",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Columnas ::= Columna Igual Informacion_O_Identificador 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Columnas",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Columnas ::= Columna Igual Comillas DatosDeColumna Comillas Columnas 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Columnas",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Columnas ::= Columna Igual Informacion_O_Identificador Columnas 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Columnas",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Columnas ::= Columna Igual Imagenes 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Columnas",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Columnas ::= Columna Igual Imagenes Columnas 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Columnas",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DatosDeColumna ::= Operaciones 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DatosDeColumna",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DatosDeColumna ::= OperacionCompleta 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DatosDeColumna",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DatosDeColumna ::= Numeros 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DatosDeColumna",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DatosDeColumna ::= Email 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DatosDeColumna",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Igualdad ::= Igual 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Igualdad",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Igualdad ::= Dos_Puntos 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Igualdad",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // InformacionMultiple ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("InformacionMultiple",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // InformacionMultiple ::= Informacion_O_Identificador InformacionMultiple 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("InformacionMultiple",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // InformacionMultiple ::= Dato_O_InformacionDesconocida InformacionMultiple 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("InformacionMultiple",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OperacionCompleta ::= AnteOperacion PosibleParentesisApertura Operaciones PosibleParentesisCierre PostOperacion 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OperacionCompleta",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NumerosODecimales ::= Decimal 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NumerosODecimales",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NumerosODecimales ::= Numeros 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NumerosODecimales",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Operaciones ::= NumerosODecimales Operadores NumerosODecimales 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Operaciones",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Operaciones ::= NumerosODecimales Operadores NumerosODecimales Operadores NumerosODecimales 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Operaciones",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PostOperacion ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PostOperacion",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PostOperacion ::= Operadores NumerosODecimales PostOperacion 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PostOperacion",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AnteOperacion ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AnteOperacion",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AnteOperacion ::= NumerosODecimales Operadores AnteOperacion 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AnteOperacion",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PosibleParentesisApertura ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PosibleParentesisApertura",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PosibleParentesisApertura ::= Parentesis_Apertura 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PosibleParentesisApertura",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PosibleParentesisCierre ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PosibleParentesisCierre",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PosibleParentesisCierre ::= Parentesis_Cierre 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PosibleParentesisCierre",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Operadores ::= Suma 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Operadores",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Operadores ::= Resta 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Operadores",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Operadores ::= Multiplicacion 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Operadores",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Operadores ::= Division 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Operadores",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Atributos ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Atributos",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Atributos ::= Atributo Igualdad Numeros Atributos 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Atributos",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Listas ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Listas",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Listas ::= Lista_Apertura InformacionMultiple Lista_Cierre Listas 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Listas",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Enlaces ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Enlaces",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Enlaces ::= Enlace Igual Link_Enlace Enlaces 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Enlaces",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Imagenes ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Imagenes",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Imagenes ::= Imagen_Apertura Atributo Igual Informacion_O_Identificador Enlaces Atributos Imagen_Cierre Imagenes 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Imagenes",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Imagenes ::= Imagen_Apertura Dato_O_InformacionDesconocida Imagen_Cierre Imagenes 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Imagenes",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
